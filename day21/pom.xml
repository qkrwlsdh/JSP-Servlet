<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.itbank</groupId>
  <artifactId>day21</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  <!-- dependency : 의존성, 내가 만드는 프로젝트가 지정한 라이브러리에 대해 의존적이다
  		내 프로젝트는 이 라이브러리가 필요하다 -->
  <dependencies>
  	<!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 -->
	<dependency>
	    <groupId>com.oracle.database.jdbc</groupId>
	    <artifactId>ojdbc8</artifactId>
	    <version>19.8.0.0</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-context</artifactId>
	    <version>4.3.30.RELEASE</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2 -->
	<dependency>
	    <groupId>org.apache.commons</groupId>
	    <artifactId>commons-dbcp2</artifactId>
	    <version>2.8.0</version>
	</dependency>
	
  </dependencies>
  
  
  <!-- Project Object Model, pom.xml -->
  <!-- 
  		파일업로드, ojdbc, jstl, connection-pool과 같은 라이브러리를 참조하여 만드는데
  		만약 프로젝트의 크기가 작다면, 필요한 라이브러리 파일을 준비해놓고 프로젝트에 복사해서 사용하면 되지만
  		일일이 라이브러리를 찾아서 포함시키는 과정이 번거로울 수 있다
  		
  		대규모 프로젝트의 경우, 외부 혹은 자체 라이브러리를 사용하지 않는 경우는 없다고 봐도 무방하여
  		이때 프로젝트의 라이브러리 관리를 편리하게 할수있도록 도와주는 형식이 MAVEN
  		
  		MAVEN 프로젝트를 생성한다는 말은, 편하게 라이브러리를 프로젝트에 포함시키겠다 라는 의미이다
   -->
   
   <build>
   		<plugins>
   			<plugin>
   				<artifactId>maven-compiler-plugin</artifactId>
   				<version>3.1</version>
   				<configuration>
   					<source>1.8</source>
   					<target>1.8</target>
   					<encoding>utf-8</encoding>
   				</configuration>
   			</plugin>
   		</plugins>
   </build>
   
</project>